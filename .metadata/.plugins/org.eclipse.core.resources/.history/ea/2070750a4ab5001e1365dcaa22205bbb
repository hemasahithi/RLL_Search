package Steps;
import static org.junit.Assert.assertEquals;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.PageFactory;

import io.cucumber.java.After;
import io.cucumber.java.PendingException;
import io.cucumber.java.Scenario;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import pagefactory.Searchpage;
import java.util.Arrays;
import java.util.Collection;

public class Searchsteps {
    Logger logger = LogManager.getLogger(Searchsteps.class);
    WebDriver driver = new ChromeDriver();
    public Searchpage searchPage;
    private AssertionError softAssertion;

    @Given("I open the browser and enter the URL")
    public void iOpenTheBrowserAndEnterTheURL() {
        logger.info("Chilternoak Furniture Homepage");
        searchPage = new Searchpage();
        driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.get("https://www.chilternoakfurniture.co.uk/");
        searchPage = PageFactory.initElements(driver, Searchpage.class);
    }

    @When("I enter a valid product name as {string} in the search bar")
    public void iEnterAValidProductNameInTheSearchBar(String productName) {
        logger.info("entering valid product name");
        searchPage.enterSearchTerm(productName);
    }

    @When("I click on the search button")
    public void iClickOnTheSearchButton() {
        logger.info("clicking on search button");
        searchPage.clickSearchButton();
        driver.close();
    }

    @Then("I should see the search results for product {string}")
    public void verifySearchResults(String expectedProductName) {
        try {
            // Implementation for verifying search results
            // Example: assertSearchResults(expectedProductName);
        } catch (AssertionError e) {
            if (softAssertion != null) {
                softAssertion.addSuppressed(e);
            } else {
                throw e;
            }
        }
    }

    
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][] {
            { "sofa" },
            { "" }, // Empty product name
            { "perfumes" },
            { "chopa" },
            { "Industrial Tan 90cm Studded Back Bench" }
        });
    }

    @After
    public void assertAll() {
        if (softAssertion != null) {
            throw softAssertion;
        }
    }

    public void teardown(Scenario scenario) {
        TakesScreenshot ts = (TakesScreenshot) driver;
        final byte[] screenshot = ts.getScreenshotAs(OutputType.BYTES);
        scenario.attach(screenshot, "image/png", scenario.getName());
        driver.close();
    }
}
    
